// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

type Packet capnp.Client

// Packet_TypeID is the unique identifier for the type Packet.
const Packet_TypeID = 0xec567d107426c7e3

func (c Packet) Get(ctx context.Context, params func(Packet_get_Params) error) (Packet_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xec567d107426c7e3,
			MethodID:      0,
			InterfaceName: "transfer.capnp:Packet",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Packet_get_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Packet_get_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Packet) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Packet) AddRef() Packet {
	return Packet(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Packet) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Packet) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Packet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Packet) DecodeFromPtr(p capnp.Ptr) Packet {
	return Packet(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Packet) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Packet) IsSame(other Packet) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Packet) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Packet) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Packet_Server is a Packet with a local implementation.
type Packet_Server interface {
	Get(context.Context, Packet_get) error
}

// Packet_NewServer creates a new Server from an implementation of Packet_Server.
func Packet_NewServer(s Packet_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Packet_Methods(nil, s), s, c)
}

// Packet_ServerToClient creates a new Client from an implementation of Packet_Server.
// The caller is responsible for calling Release on the returned Client.
func Packet_ServerToClient(s Packet_Server) Packet {
	return Packet(capnp.NewClient(Packet_NewServer(s)))
}

// Packet_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Packet_Methods(methods []server.Method, s Packet_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xec567d107426c7e3,
			MethodID:      0,
			InterfaceName: "transfer.capnp:Packet",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Packet_get{call})
		},
	})

	return methods
}

// Packet_get holds the state for a server call to Packet.get.
// See server.Call for documentation.
type Packet_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Packet_get) Args() Packet_get_Params {
	return Packet_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Packet_get) AllocResults() (Packet_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Packet_get_Results(r), err
}

// Packet_List is a list of Packet.
type Packet_List = capnp.CapList[Packet]

// NewPacket creates a new list of Packet.
func NewPacket_List(s *capnp.Segment, sz int32) (Packet_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Packet](l), err
}

type Packet_get_Params capnp.Struct

// Packet_get_Params_TypeID is the unique identifier for the type Packet_get_Params.
const Packet_get_Params_TypeID = 0x86792ba649a729b6

func NewPacket_get_Params(s *capnp.Segment) (Packet_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Packet_get_Params(st), err
}

func NewRootPacket_get_Params(s *capnp.Segment) (Packet_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Packet_get_Params(st), err
}

func ReadRootPacket_get_Params(msg *capnp.Message) (Packet_get_Params, error) {
	root, err := msg.Root()
	return Packet_get_Params(root.Struct()), err
}

func (s Packet_get_Params) String() string {
	str, _ := text.Marshal(0x86792ba649a729b6, capnp.Struct(s))
	return str
}

func (s Packet_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Packet_get_Params) DecodeFromPtr(p capnp.Ptr) Packet_get_Params {
	return Packet_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Packet_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Packet_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Packet_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Packet_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Packet_get_Params) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Packet_get_Params) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet_get_Params) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Packet_get_Params) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Packet_get_Params_List is a list of Packet_get_Params.
type Packet_get_Params_List = capnp.StructList[Packet_get_Params]

// NewPacket_get_Params creates a new list of Packet_get_Params.
func NewPacket_get_Params_List(s *capnp.Segment, sz int32) (Packet_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Packet_get_Params](l), err
}

// Packet_get_Params_Future is a wrapper for a Packet_get_Params promised by a client call.
type Packet_get_Params_Future struct{ *capnp.Future }

func (f Packet_get_Params_Future) Struct() (Packet_get_Params, error) {
	p, err := f.Future.Ptr()
	return Packet_get_Params(p.Struct()), err
}

type Packet_get_Results capnp.Struct

// Packet_get_Results_TypeID is the unique identifier for the type Packet_get_Results.
const Packet_get_Results_TypeID = 0xe205d3a81390b66a

func NewPacket_get_Results(s *capnp.Segment) (Packet_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Packet_get_Results(st), err
}

func NewRootPacket_get_Results(s *capnp.Segment) (Packet_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Packet_get_Results(st), err
}

func ReadRootPacket_get_Results(msg *capnp.Message) (Packet_get_Results, error) {
	root, err := msg.Root()
	return Packet_get_Results(root.Struct()), err
}

func (s Packet_get_Results) String() string {
	str, _ := text.Marshal(0xe205d3a81390b66a, capnp.Struct(s))
	return str
}

func (s Packet_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Packet_get_Results) DecodeFromPtr(p capnp.Ptr) Packet_get_Results {
	return Packet_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Packet_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Packet_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Packet_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Packet_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Packet_get_Results) Payload() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Packet_get_Results) HasPayload() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet_get_Results) SetPayload(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Packet_get_Results_List is a list of Packet_get_Results.
type Packet_get_Results_List = capnp.StructList[Packet_get_Results]

// NewPacket_get_Results creates a new list of Packet_get_Results.
func NewPacket_get_Results_List(s *capnp.Segment, sz int32) (Packet_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Packet_get_Results](l), err
}

// Packet_get_Results_Future is a wrapper for a Packet_get_Results promised by a client call.
type Packet_get_Results_Future struct{ *capnp.Future }

func (f Packet_get_Results_Future) Struct() (Packet_get_Results, error) {
	p, err := f.Future.Ptr()
	return Packet_get_Results(p.Struct()), err
}

type Book capnp.Struct

// Book_TypeID is the unique identifier for the type Book.
const Book_TypeID = 0x8100cc88d7d4d47c

func NewBook(s *capnp.Segment) (Book, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Book(st), err
}

func NewRootBook(s *capnp.Segment) (Book, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Book(st), err
}

func ReadRootBook(msg *capnp.Message) (Book, error) {
	root, err := msg.Root()
	return Book(root.Struct()), err
}

func (s Book) String() string {
	str, _ := text.Marshal(0x8100cc88d7d4d47c, capnp.Struct(s))
	return str
}

func (s Book) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Book) DecodeFromPtr(p capnp.Ptr) Book {
	return Book(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Book) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Book) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Book) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Book) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Book) Title() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Book) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Book) SetTitle(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Book) PageCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Book) SetPageCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// Book_List is a list of Book.
type Book_List = capnp.StructList[Book]

// NewBook creates a new list of Book.
func NewBook_List(s *capnp.Segment, sz int32) (Book_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Book](l), err
}

// Book_Future is a wrapper for a Book promised by a client call.
type Book_Future struct{ *capnp.Future }

func (f Book_Future) Struct() (Book, error) {
	p, err := f.Future.Ptr()
	return Book(p.Struct()), err
}

const schema_85d3acc39d94e0f8 = "x\xda|\x91\xbf\x8b\x13A\x18\x86\xdfwv\xd7\x0d\x92" +
	"%Y7\xd8FB\x10\x821\xf8\xa3\x11\x1bC,$" +
	"\x85\xb0\x93\xc2~\x88c\xd0\xc4\xec\x92\x9d \x01E," +
	"\x14K\x0b[\x1b\x0b\xb5\xd0F0\x95`a\x91\xc6." +
	"\x11+A\xbc\xf6\xfe\x80k\x8e=6w\xb7\x09W\\" +
	"7\x0c\x0f\xcf3\xdf|\xe5\xefm\xfb\xaa\xb7\x10\x10\xf2" +
	"\x82s\xe6\xc7\xd3\xd5\xea\xcf\xeb_/d\x89L\xf7\xfe" +
	"\xbd}\xf7\xf3\xf3\xf2%\x1c\xba@\xd0\xe5\xfb@\xaeO" +
	"w\xf9\x04L\xe7\x8d\x8f\xdd\x0f\x97f\xaf\xe0\x9f'\x0e" +
	"\x99\xeb_x\x96`\xf0\x8d\xb7\xc0\xf4\xd1\xfcM\xf0i" +
	"\xe9\xfc\xdf\x06~\xf3\\\x06\xfc]\x03;\x8b\x8b\xa6\xfc" +
	"\xec\xde.\xfc\x92\xb5\xa9\x81\xc1>\xbf\x06\x8e\xc8R\x14" +
	"w\x82\x86p\xd1L\xcdD\x8d\x93\x07z\xc2V_\xc5" +
	"\xe3\xf8f\xc7\x8d\xa2aH\xca\x82e\x036\x01\xbfq" +
	"\x0d\x90u\x8b\xf2\x8a Yavw\xb9\x07\xc8\xa6E" +
	"yC\xb0j\x1e\x9a\x91\xa6\x07A\x0fLc5\xd0\xb7" +
	"\xa3\xe9\x184\xb4!h\x83y\xc5:\xaa\x84\xaa?\xd4" +
	"\xa65\xd0\xa6\x1e\xaa\x89z\x9c\x00\xd2\xce\x83^\x0d\x90" +
	"\x05\x8b\xb2\"\xe8\x0e\xf5\x8cE\x08\x16O\xd7\xf4t2" +
	"\x1d\x19&\xdb\x9a\xceF\xf3<V\xb3Q\xa4\xee\xe7\xaf" +
	"<9wX]\xbb\xb2\xc9m\xcb\x01\xf2=\xf0\xf8\xbf" +
	"}\xbf\x06\xe1;\xae;\xd0\xa6\xcd\x90<\x08\x00\x00\xff" +
	"\xffpOy\xfb"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0x8100cc88d7d4d47c,
		0x86792ba649a729b6,
		0xe205d3a81390b66a,
		0xec567d107426c7e3)
}
